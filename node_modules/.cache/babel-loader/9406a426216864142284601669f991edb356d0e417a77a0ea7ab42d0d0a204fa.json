{"ast":null,"code":"var _jsxFileName = \"/Users/aaron/Desktop/react-lights/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n\n    // Loop through each row\n    for (let i = 0; i < nrows; i++) {\n      let row = [];\n      // Loop through each column\n      for (let j = 0; j < ncols; j++) {\n        // Determine if the cell should start as lit or unlit\n        const isLit = Math.random() < chanceLightStartsOn; // chanceLightStartsOn = .5 would be 50 percent chance of true or false.  \n        row.push(isLit);\n      }\n      // Add the row to the board\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board-winner\",\n      children: \"You Won!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Create table board\n  const tableBoard = [];\n  for (let i = 0; i < nrows; i++) {\n    let row = [];\n    for (let j = 0; j < ncols; j++) {\n      const coord = `${i}-${j}`;\n      row.push( /*#__PURE__*/_jsxDEV(Cell, {\n        isLit: board[i][j],\n        flipCellsAroundMe: () => flipCellsAround(coord)\n      }, coord, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this));\n    }\n    tableBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }, this));\n  }\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nfunction flipCellsAround(coord) {\n  setBoard(oldBoard => {\n    const [y, x] = coord.split(\"-\").map(Number);\n    const boardCopy = [...oldBoard]; // Make a shallow copy of the old board\n\n    // Function to flip a cell and its adjacent cells\n    const flipCell = (y, x) => {\n      // Flip the cell itself\n      boardCopy[y][x] = !boardCopy[y][x];\n\n      // Flip adjacent cells (up, down, left, right)\n      const directions = [[0, 1], [0, -1], [1, 0], [-1, 0]]; // Right, Left, Down, Up\n      directions.forEach(([dy, dx]) => {\n        const ny = y + dy;\n        const nx = x + dx;\n        if (nx >= 0 && nx < ncols && ny >= 0 && ny < nrows) {\n          boardCopy[ny][nx] = !boardCopy[ny][nx];\n        }\n      });\n    };\n\n    // Flip the clicked cell and its adjacent cells\n    flipCell(y, x);\n    return boardCopy; // Return the updated board\n  });\n}\n\n// if the game is won, just show a winning msg & render nothing else\n\n// TODO\n\n// make table board\n\n// TODO\n\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","i","row","j","isLit","Math","random","push","hasWon","className","children","fileName","_jsxFileName","lineNumber","columnNumber","tableBoard","coord","flipCellsAroundMe","flipCellsAround","_c","oldBoard","y","x","split","map","Number","boardCopy","flipCell","directions","forEach","dy","dx","ny","nx","$RefreshReg$"],"sources":["/Users/aaron/Desktop/react-lights/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n\n    // Loop through each row\n    for (let i = 0; i < nrows; i++) {\n      let row = [];\n      // Loop through each column\n      for (let j = 0; j < ncols; j++) {\n        // Determine if the cell should start as lit or unlit\n        const isLit = Math.random() < chanceLightStartsOn;  // chanceLightStartsOn = .5 would be 50 percent chance of true or false.  \n        row.push(isLit);\n      }\n      // Add the row to the board\n      initialBoard.push(row);\n    }\n\n    return initialBoard;\n  }\n\n  if (hasWon()) {\n    return <div className=\"Board-winner\">You Won!</div>;\n  }\n  \n  // Create table board\n  const tableBoard = [];\n  for (let i = 0; i < nrows; i++) {\n    let row = [];\n    for (let j = 0; j < ncols; j++) {\n      const coord = `${i}-${j}`;\n      row.push(\n        <Cell\n          key={coord}\n          isLit={board[i][j]}\n          flipCellsAroundMe={() => flipCellsAround(coord)}\n        />\n      );\n    }\n    tableBoard.push(<tr key={i}>{row}</tr>);\n  }\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n  \n      const boardCopy = [...oldBoard]; // Make a shallow copy of the old board\n  \n      // Function to flip a cell and its adjacent cells\n      const flipCell = (y, x) => {\n        // Flip the cell itself\n        boardCopy[y][x] = !boardCopy[y][x];\n  \n        // Flip adjacent cells (up, down, left, right)\n        const directions = [[0, 1], [0, -1], [1, 0], [-1, 0]]; // Right, Left, Down, Up\n        directions.forEach(([dy, dx]) => {\n          const ny = y + dy;\n          const nx = x + dx;\n          if (nx >= 0 && nx < ncols && ny >= 0 && ny < nrows) {\n            boardCopy[ny][nx] = !boardCopy[ny][nx];\n          }\n        });\n      };\n  \n      // Flip the clicked cell and its adjacent cells\n      flipCell(y, x);\n  \n      return boardCopy; // Return the updated board\n    });\n  }\n  \n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}