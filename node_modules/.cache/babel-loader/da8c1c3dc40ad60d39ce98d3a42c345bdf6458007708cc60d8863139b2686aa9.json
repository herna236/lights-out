{"ast":null,"code":"var _jsxFileName = \"/Users/aaron/Desktop/react-lights/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let i = 0; i < nrows; i++) {\n      let row = [];\n      for (let j = 0; j < ncols; j++) {\n        const isLit = Math.random() < chanceLightStartsOn;\n        row.push(isLit);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n  function hasWon() {\n    // Check if all cells are unlit\n    return board.every(row => row.every(cell => !cell));\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const boardCopy = [...oldBoard];\n      const flipCell = (y, x) => {\n        boardCopy[y][x] = !boardCopy[y][x];\n        const directions = [[0, 1], [0, -1], [1, 0], [-1, 0]];\n        directions.forEach(([dy, dx]) => {\n          const ny = y + dy;\n          const nx = x + dx;\n          if (nx >= 0 && nx < ncols && ny >= 0 && ny < nrows) {\n            boardCopy[ny][nx] = !boardCopy[ny][nx];\n          }\n        });\n      };\n      flipCell(y, x);\n\n      // Check for winning condition after updating board\n      if (hasWon()) {\n        setTimeout(() => alert(\"Congratulations! You won!\"), 50); // Example: alert message\n      }\n      return boardCopy;\n    });\n  }\n\n  // Create table board\n  const tableBoard = [];\n  for (let i = 0; i < nrows; i++) {\n    let row = [];\n    for (let j = 0; j < ncols; j++) {\n      const coord = `${i}-${j}`;\n      row.push( /*#__PURE__*/_jsxDEV(Cell, {\n        isLit: board[i][j],\n        flipCellsAroundMe: () => flipCellsAround(coord)\n      }, coord, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this));\n    }\n    tableBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Board\",\n    children: hasWon() ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board-winner\",\n      children: \"You Won!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"Board-table\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tableBoard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","i","row","j","isLit","Math","random","push","hasWon","every","cell","flipCellsAround","coord","oldBoard","y","x","split","map","Number","boardCopy","flipCell","directions","forEach","dy","dx","ny","nx","setTimeout","alert","tableBoard","flipCellsAroundMe","fileName","_jsxFileName","lineNumber","columnNumber","children","className","_c","$RefreshReg$"],"sources":["/Users/aaron/Desktop/react-lights/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n\n    for (let i = 0; i < nrows; i++) {\n      let row = [];\n      for (let j = 0; j < ncols; j++) {\n        const isLit = Math.random() < chanceLightStartsOn;\n        row.push(isLit);\n      }\n      initialBoard.push(row);\n    }\n\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // Check if all cells are unlit\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const boardCopy = [...oldBoard];\n\n      const flipCell = (y, x) => {\n        boardCopy[y][x] = !boardCopy[y][x];\n        const directions = [[0, 1], [0, -1], [1, 0], [-1, 0]];\n        directions.forEach(([dy, dx]) => {\n          const ny = y + dy;\n          const nx = x + dx;\n          if (nx >= 0 && nx < ncols && ny >= 0 && ny < nrows) {\n            boardCopy[ny][nx] = !boardCopy[ny][nx];\n          }\n        });\n      };\n\n      flipCell(y, x);\n\n      // Check for winning condition after updating board\n      if (hasWon()) {\n        setTimeout(() => alert(\"Congratulations! You won!\"), 50); // Example: alert message\n      }\n\n      return boardCopy;\n    });\n  }\n\n  // Create table board\n  const tableBoard = [];\n  for (let i = 0; i < nrows; i++) {\n    let row = [];\n    for (let j = 0; j < ncols; j++) {\n      const coord = `${i}-${j}`;\n      row.push(\n        <Cell\n          key={coord}\n          isLit={board[i][j]}\n          flipCellsAroundMe={() => flipCellsAround(coord)}\n        />\n      );\n    }\n    tableBoard.push(<tr key={i}>{row}</tr>);\n  }\n\n  return (\n    <div className=\"Board\">\n      {hasWon() ? (\n        <div className=\"Board-winner\">You Won!</div>\n      ) : (\n        <table className=\"Board-table\">\n          <tbody>{tableBoard}</tbody>\n        </table>\n      )}\n    </div>\n  );\n}\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}